
// FileTraversalDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "FileTraversal.h"
#include "FileTraversalDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CFileTraversalDlg 对话框




CFileTraversalDlg::CFileTraversalDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CFileTraversalDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CFileTraversalDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CFileTraversalDlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &CFileTraversalDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDCANCEL, &CFileTraversalDlg::OnBnClickedCancel)
	ON_BN_CLICKED(IDC_BFILETEST, &CFileTraversalDlg::OnBnClickedBfiletest)
END_MESSAGE_MAP()


// CFileTraversalDlg 消息处理程序

BOOL CFileTraversalDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CFileTraversalDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CFileTraversalDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CFileTraversalDlg::OnBnClickedOk()
{
	// TODO: 在此添加控件通知处理程序代码
	CDialogEx::OnOK();
	exit(0);
}


void CFileTraversalDlg::OnBnClickedCancel()
{
	// TODO: 在此添加控件通知处理程序代码
	CDialogEx::OnCancel();
	exit(0);
}


void CFileTraversalDlg::OnBnClickedBfiletest()
{
	// TODO: 在此添加控件通知处理程序代码
	CString strDirPath=_T("d:\\filetest");
	if(PathFileExists(strDirPath))//判断文件路径是否存在
	{
		SetCurrentDirectory(strDirPath);//设置当前目录
		FindFile(strDirPath);
	}
}

void CFileTraversalDlg::FindFile(CString Curdir)
{
	CFileFind  finder;
    BOOL bWorking = finder.FindFile(_T("*.*"));
    while(bWorking)
    {
		bWorking = finder.FindNextFile();
        if(finder.IsDirectory()&&!finder.IsDots())//文件夹
		{
			CString oldDir;//保存原始的当前路径
            GetCurrentDirectory(50,(LPTSTR)(LPCTSTR)oldDir);//获取当前路径
			SetCurrentDirectory(finder.GetFilePath());
			FindFile(finder.GetFilePath());//继续遍历子文件夹
			SetCurrentDirectory((LPCTSTR)oldDir);//恢复当前目录
		}
        else if(!finder.IsDirectory())//文件
		{
			CString FileName=finder.GetFileName();
			int Where=FileName.ReverseFind('//');
            if(Where==-1)
            {
                Where=FileName.ReverseFind('/');
            }
            CString FileTitle=FileName.Right(FileName.GetLength()-1-Where);
            int Which=FileTitle.ReverseFind('.');
            CString ExtendName=FileTitle.Right(FileTitle.GetLength()-Which-1);
			if(ExtendName=="txt")
			{
				AfxMessageBox(finder.GetFilePath(),MB_OK,NULL);//此处为要处理的代码
			}
		}
    }
	finder.Close();
}